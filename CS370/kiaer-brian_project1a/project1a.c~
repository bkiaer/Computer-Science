#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

int main()
{

  printf("Enter Command: ");
  
  char * buffer = (char*)calloc(256, sizeof(char));
  fgets(buffer, 256, stdin);
  printf("%s", buffer);
  if(strlen(buffer) == 1)
    {
      printf("Invalid Command");
      return 1;
    }

  char * argv1[10];
  char * argv2[10];
 
  int fd[2];
  int pid, pid2, status;

  pipe(fd);
  pid = fork();
  

 
  if(pid < 0)
    {    
    perror("Failed to create fork");
    return 1;
    }
  if(pid > 0) 
    {
    waitpid(pid, &status, WUNTRACED);
    close(0);
    dup(fd[0]);
    close(fd[1]);
    
    }
  else if (pid == 0) 
    {
     
       close(1);
       dup(fd[1]);
       close(fd[0]);
       
   
      int i = 0;
      strtok(buffer, "|");
      argv1[0] = strtok(buffer, " ");
      
      while(argv1[i] != NULL)
	{
	  printf("%s\n", argv1[i]);
	  i++;
	  argv1[i] = strtok(NULL, " ");
	  }
   
  
      execvp(argv1[0],argv1);
      
      perror(NULL);
      exit(0);     
    }

  pid2 = fork();
  
  if(pid2 < 0)
    {
      perror("Failed to creat fork");
      return 1;
      }
  
  if(pid2 >0)
    {
    waitpid(pid2, &status, WUNTRACED);
    }
  else if(pid2 == 0)
    {
      
      int i = 0;
      
      strtok(buffer, "|");
      argv2[0] =  strtok(NULL, "\n");
      
      argv2[0] = strtok(argv2[0], " ");
      while(argv2[i] != NULL)
	{
	  i++;
	  argv2[i] = strtok(NULL, " ");
	  }
      
        execvp(argv2[0], argv2);
	
       	perror(NULL);
		  
	exit(0);
    }

  return 0;
}
