#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

int main ()
{

  int first_check = 1;
  int second_check = 1;
  int path=1;
  int i = 0;
  int fd[2];
  int pid, pid2,  status;
  char * cd = "cd";
  char * argv[200];
  char * prompt = (char*) malloc(100); 
  char * buffer = (char*) calloc(256, sizeof(char));

  getcwd(prompt, 100);
  printf("%s> ",prompt);
  fgets(buffer, 256, stdin);
  strtok(buffer, "\n");

 
  while(second_check != 0)
    {
    
      first_check = strcmp(buffer, "quit");


      if(first_check == 0)
	{
	  printf("Are you sure you want to quit? [y/n] ");
	  fgets(buffer, 256, stdin);
	  second_check = strcmp(buffer, "y\n");
	}
    
 
   else
  	{
  	  pipe(fd);
  	  pid = fork();
	  if(pid < 0)
	    printf("Error creating fork");
	  if(pid > 0)
	    {
	      
	      waitpid(pid, &status, WUNTRACED);
	     
	      dup(fd[0]);
	      close(fd[1]);
	    }
	  else if(pid == 0) {
	   
	    dup(fd[1]);
	    close(fd[0]);

	  argv[0] = strtok(buffer, " ");
	  
	  printf("%s\n", argv[0]);
	  //	  cd[0] = "cd";
	  if(strcmp(argv[0],cd)==0)
	    path = 0;
	    
	  while(argv[i] != NULL)
	    {
	      
	      i++;
	      argv[i] = strtok(NULL, " ");
	    }
	  
	  if(path == 0)
	    chdir(argv[1]);
	 
	  execvp(argv[0], argv);
	  
	  perror(NULL);
	  exit(0);

	  	  }
	 
	    }
    
      getcwd(prompt, 100);
      printf("%s> ", prompt);
      fgets(buffer, 256, stdin);
      strtok(buffer, "\n");
    }
	  
  return 0;
	  }
